/*
 * ProjectionSelectionPanel.java
 *
 * Created on September 16, 2006, 2:54 PM
 */
package ch.ethz.karto.gui;

import com.jhlabs.map.Ellipsoid;
import com.jhlabs.map.proj.Projection;
import com.jhlabs.map.proj.ProjectionFactory;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JSlider;

/**
 * ProjectionSelectionPanel lets the user select a projection, applies the
 * selected projection to a group of lines, and displays basic information about
 * the projection.
 *
 * @author Bernhard Jenny, Institute of Cartography, ETH Zurich.
 */
public class ProjectionSelectionPanel extends javax.swing.JPanel {

    /**
     * The lines that are displayed. Must be in geographic coordinates
     * (degrees).
     */
    private ArrayList<MapLine> lines = null;

    /**
     * Creates new form ProjectionSelectionPanel
     */
    public ProjectionSelectionPanel() {
        initComponents();

        Object[] projNames = ProjectionFactory.getOrderedProjectionNames();
        projectionComboBox.setModel(new DefaultComboBoxModel(projNames));
    }

    private void project() {

        boolean inverse = inverseCheckBox.isSelected();
        try {
            // find the selected name, create the corresponding projection.
            String projName = (String) projectionComboBox.getSelectedItem();
            Projection projection = ProjectionFactory.getNamedProjection(projName);

            // use the selected projection to project the lines,
            // and pass the projected lines to the map to display.
            if (projection != null) {
                projection.setProjectionLongitudeDegrees(lon0Slider.getValue());
                projection.setEllipsoid(Ellipsoid.SPHERE);
                projection.initialize();

                LineProjector projector = new LineProjector();
                ArrayList<MapLine> projectedLines = new ArrayList<>();
                projector.constructGraticule(projectedLines, projection);
                projector.projectLines(lines, projectedLines, projection);
                if (inverse && projection.hasInverse()) {
                    projectedLines = projector.inverse(projectedLines, projection);
                }

                map.setLines(projectedLines);
            } else {
                map.setLines(null);
            }

            // write some descriptive information about the selected projection.
            updateProjectionInfo(projection);

        } catch (Exception exc) {
            String msg = exc.getMessage();
            String title = "Error";
            JOptionPane.showMessageDialog(selectionPanel, msg, title, JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(ProjectionSelectionPanel.class.getName()).log(Level.SEVERE, null, exc);
        }
    }

    /**
     * Set the lines that are projected and displayed.
     *
     * @param lines The lines to project. Must be in geographic coordinates
     * (degrees).
     */
    public void setLines(ArrayList<MapLine> lines) {
        // store the passed lines
        this.lines = lines;

        // pass the new lines to the map that displays the lines.
        map.setLines(lines);

        // reset the graphical user interface to the first projection.
        projectionComboBox.setSelectedIndex(0);
        project();
    }

    /**
     * Write basic information about the projection to the graphical user
     * interface.
     *
     * @projection The Projection that provides the information.
     */
    private void updateProjectionInfo(Projection projection) {
        if (projection == null) {
            descriptionLabel.setText("-");
        } else {
            descriptionLabel.setText(projection.getDescription());
            if (projection.hasInverse()) {
                System.out.println("Found inverse equation for " + projection.getName() + ".");
            } else {
                System.out.println("No inverse equation for " + projection.getName() + ".");
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        selectionPanel = new javax.swing.JPanel();
        projectionComboBox = new javax.swing.JComboBox();
        previousProjectionButton = new javax.swing.JButton();
        nextProjectionButton = new javax.swing.JButton();
        inverseCheckBox = new javax.swing.JCheckBox();
        map = new ch.ethz.karto.gui.MapComponent();
        infoPanel = new javax.swing.JPanel();
        javax.swing.JLabel descriptionLeadLabel = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();
        javax.swing.JLabel longitudeLeadLabel = new javax.swing.JLabel();
        lon0Slider = new javax.swing.JSlider();
        lon0Label = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout(10, 10));

        selectionPanel.setPreferredSize(new java.awt.Dimension(100, 40));
        selectionPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 10));

        projectionComboBox.setMaximumRowCount(40);
        projectionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Plate Carrée (Geographic)", "Cylindrical Equal-Area", "Cylindrical Conformal (Mercator)", "Conical Equidistant", "Conical Equal-Area (Albers)", "Conical Conformal (Lambert)", "Azimuthal Equidistant", "Azimuthal Equal-Area (Lambert)", "Azimuthal Conformal (Stereographic)", "Azimuthal Orthographic", "Sinusoidal", "Pseudoconical Equal-Area (Bonne)" }));
        projectionComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                projectionComboBoxItemStateChanged(evt);
            }
        });
        selectionPanel.add(projectionComboBox);

        previousProjectionButton.setText("<");
        previousProjectionButton.setPreferredSize(new java.awt.Dimension(50, 29));
        previousProjectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousProjectionButtonActionPerformed(evt);
            }
        });
        selectionPanel.add(previousProjectionButton);

        nextProjectionButton.setText(">");
        nextProjectionButton.setPreferredSize(new java.awt.Dimension(50, 29));
        nextProjectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextProjectionButtonActionPerformed(evt);
            }
        });
        selectionPanel.add(nextProjectionButton);

        inverseCheckBox.setText("Test Inverse");
        inverseCheckBox.setToolTipText("Applies forward and inverse projection, which should result in a Plate Carrée projection.");
        inverseCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inverseCheckBoxActionPerformed(evt);
            }
        });
        selectionPanel.add(inverseCheckBox);

        add(selectionPanel, java.awt.BorderLayout.NORTH);

        map.setPreferredSize(new java.awt.Dimension(400, 300));
        add(map, java.awt.BorderLayout.CENTER);

        infoPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(""), javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10)));
        infoPanel.setMinimumSize(new java.awt.Dimension(400, 96));
        infoPanel.setPreferredSize(new java.awt.Dimension(500, 200));
        infoPanel.setLayout(new java.awt.GridBagLayout());

        descriptionLeadLabel.setText("Description");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        infoPanel.add(descriptionLeadLabel, gridBagConstraints);

        descriptionLabel.setText("-");
        descriptionLabel.setMaximumSize(new java.awt.Dimension(300, 16));
        descriptionLabel.setMinimumSize(new java.awt.Dimension(300, 16));
        descriptionLabel.setPreferredSize(new java.awt.Dimension(300, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 0);
        infoPanel.add(descriptionLabel, gridBagConstraints);

        longitudeLeadLabel.setText("Longitude of Origin");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        infoPanel.add(longitudeLeadLabel, gridBagConstraints);

        lon0Slider.setMaximum(180);
        lon0Slider.setMinimum(-180);
        lon0Slider.setValue(0);
        lon0Slider.setMinimumSize(new java.awt.Dimension(200, 29));
        lon0Slider.setPreferredSize(new java.awt.Dimension(200, 29));
        lon0Slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lon0SliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 0);
        infoPanel.add(lon0Slider, gridBagConstraints);

        lon0Label.setText("0");
        lon0Label.setMaximumSize(new java.awt.Dimension(50, 16));
        lon0Label.setMinimumSize(new java.awt.Dimension(50, 16));
        lon0Label.setPreferredSize(new java.awt.Dimension(50, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        infoPanel.add(lon0Label, gridBagConstraints);

        add(infoPanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void lon0SliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_lon0SliderStateChanged
        JSlider slider = (JSlider) evt.getSource();
        lon0Label.setText(Integer.toString(slider.getValue()));
        //if (!slider.getValueIsAdjusting()) {
        project();
        //}
    }//GEN-LAST:event_lon0SliderStateChanged

    private void projectionComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_projectionComboBoxItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            project();
        }
    }//GEN-LAST:event_projectionComboBoxItemStateChanged

    private void inverseCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inverseCheckBoxActionPerformed
        project();
    }//GEN-LAST:event_inverseCheckBoxActionPerformed

    private void previousProjectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousProjectionButtonActionPerformed
        int id = projectionComboBox.getSelectedIndex() - 1;
        if (id >= 0) {
            projectionComboBox.setSelectedIndex(id);
            project();
        }
    }//GEN-LAST:event_previousProjectionButtonActionPerformed

    private void nextProjectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextProjectionButtonActionPerformed
        int id = projectionComboBox.getSelectedIndex() + 1;
        if (id < projectionComboBox.getItemCount()) {
            projectionComboBox.setSelectedIndex(id);
            project();
        }
    }//GEN-LAST:event_nextProjectionButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JCheckBox inverseCheckBox;
    private javax.swing.JLabel lon0Label;
    private javax.swing.JSlider lon0Slider;
    private ch.ethz.karto.gui.MapComponent map;
    private javax.swing.JButton nextProjectionButton;
    private javax.swing.JButton previousProjectionButton;
    private javax.swing.JComboBox projectionComboBox;
    private javax.swing.JPanel selectionPanel;
    // End of variables declaration//GEN-END:variables
}
